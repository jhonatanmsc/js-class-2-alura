{"version":3,"sources":["../../app-es6/services/ConnectionFactory.js"],"names":["stores","version","dbName","connection","close","ConnectionFactory","Error","Promise","resolve","reject","openRequest","window","indexedDB","open","onupgradeneeded","console","log","_createStore","e","target","result","onsuccess","bind","onerror","error","name","forEach","objectStoreNames","contains","store","deleteObjectStore","createObjectStore","autoIncrement"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAMA,kB,GAAS,CAAC,YAAD,C;AACTC,mB,GAAU,C;AACVC,kB,GAAS,Y;AACXC,sB,GAAa,I;AACbC,iB,GAAQ,I;;yCAECC,iB;AAET,6CAAc;AAAA;;AAEV,0BAAM,IAAIC,KAAJ,CAAU,iCAAV,CAAN;AACH;;;;oDAEsB;;AAEnB,+BAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACpC,gCAAIC,cAAcC,OAAOC,SAAP,CAAiBC,IAAjB,CAAsBX,MAAtB,EAA8BD,OAA9B,CAAlB;;AAEAS,wCAAYI,eAAZ,GAA8B,aAAK;;AAE/BC,wCAAQC,GAAR,CAAY,sCAAZ;AACAX,kDAAkBY,YAAlB,CAA+BC,EAAEC,MAAF,CAASC,MAAxC;AACH,6BAJD;;AAMAV,wCAAYW,SAAZ,GAAwB,aAAK;;AAEzBN,wCAAQC,GAAR,CAAY,4BAAZ;AACA,oCAAI,CAACb,UAAL,EAAiB;AACbA,iDAAae,EAAEC,MAAF,CAASC,MAAtB;AACAhB,4CAAQD,WAAWC,KAAX,CAAiBkB,IAAjB,CAAsBnB,UAAtB,CAAR;AACAA,+CAAWC,KAAX,GAAmB,YAAW;AAC1B,8CAAM,IAAIE,KAAJ,CAAU,kCAAV,CAAN;AACH,qCAFD;AAGH;AACDE,wCAAQL,UAAR;AACH,6BAXD;;AAaAO,wCAAYa,OAAZ,GAAsB,aAAK;AACvBR,wCAAQC,GAAR,CAAYE,EAAEC,MAAF,CAASK,KAArB;AACAf,uCAAOS,EAAEC,MAAF,CAASK,KAAT,CAAeC,IAAtB;AACH,6BAHD;AAIH,yBA1BM,CAAP;AA2BH;;;iDAEmBtB,U,EAAY;;AAE5BH,+BAAO0B,OAAP,CAAe,iBAAS;AACpB,gCAAIvB,WAAWwB,gBAAX,CAA4BC,QAA5B,CAAqCC,KAArC,CAAJ,EAAiD;AAC7C1B,2CAAW2B,iBAAX,CAA6BD,KAA7B;AACH;AACD1B,uCAAW4B,iBAAX,CAA6BF,KAA7B,EAAoC,EAAEG,eAAe,IAAjB,EAApC;AACH,yBALD;AAMH;;;oDAEsB7B,U,EAAY;;AAE/B,4BAAI,CAACA,UAAL,EAAiB;;AAEbC;AACAD,yCAAa,IAAb;AACH;AACJ","file":"ConnectionFactory.js","sourcesContent":["const stores = ['negociacao'];\nconst version = 4;\nconst dbName = 'aluraframe';\nlet connection = null;\nlet close = null;\n\nexport class ConnectionFactory {\n\n    constructor() {\n\n        throw new Error(\"Não é possivel criar instancias\");\n    }\n\n    static getConnection() {\n\n        return new Promise((resolve, reject) => {\n            var openRequest = window.indexedDB.open(dbName, version);\n\n            openRequest.onupgradeneeded = e => {\n\n                console.log(\"Cria ou altera um banco já existente\");\n                ConnectionFactory._createStore(e.target.result);\n            }\n\n            openRequest.onsuccess = e => {\n\n                console.log(\"Conexão obtida com sucesso\");\n                if (!connection) {\n                    connection = e.target.result;\n                    close = connection.close.bind(connection);\n                    connection.close = function() {\n                        throw new Error(\"fechamento direto não disponivel\")\n                    }\n                }\n                resolve(connection);\n            }\n\n            openRequest.onerror = e => {\n                console.log(e.target.error);\n                reject(e.target.error.name);\n            }\n        });\n    }\n\n    static _createStore(connection) {\n\n        stores.forEach(store => {\n            if (connection.objectStoreNames.contains(store)) {\n                connection.deleteObjectStore(store);\n            }\n            connection.createObjectStore(store, { autoIncrement: true });\n        });\n    }\n\n    static closeConnection(connection) {\n\n        if (!connection) {\n\n            close()\n            connection = null;\n        }\n    }\n}"]}