{"version":3,"sources":["../../app-es6/services/NegociacaoService.js"],"names":["HttpService","ConnectionFactory","NegociacaoService","http","url","Promise","resolve","reject","get","then","negociacoes","map","console","log","json","quantidade","n","Negociacao","Date","_data","_quantidade","_valor","catch","error","negociacao","getConnection","NegociacaoDAO","connection","dao","adiciona","err","Error","listarTodos","apagaTodos","negociacaoList","all","obter","lista","reduce","arrayAchatado","array","concat","filter","some","JSON","stringify","f"],"mappings":";;;;;;;;;;;;;;;AAAQA,uB,gBAAAA,W;;AACAC,6B,sBAAAA,iB;;;;;;;;;;;;;;;;;;;;;yCAEKC,iB;AAEZ,6CAAc;AAAA;;AAEb,yBAAKC,IAAL,GAAY,IAAIH,WAAJ,EAAZ;AACA;;;;0CAEQI,G,EAAK;AAAA;;AAEP,+BAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV;AAAA,mCAAqB,MAAKJ,IAAL,CACtCK,GADsC,CAClCJ,GADkC,EAEtCK,IAFsC,CAEhC,uBAAe;AACrBH,wCAAQI,YAAYC,GAAZ,CAAiB,gBAAQ;AACvBC,4CAAQC,GAAR,CAAYC,KAAKC,UAAjB;AACA,wCAAIC,IAAI,IAAIC,UAAJ,CAAe,IAAIC,IAAJ,CAASJ,KAAKK,KAAd,CAAf,EAAqCL,KAAKM,WAA1C,EAAuDN,KAAKO,MAA5D,CAAR;AACTT,4CAAQC,GAAR,CAAYG,CAAZ;AACS,2CAAOA,CAAP;AACH,iCALC,CAAR;AAMA,6BATsC,EAUtCM,KAVsC,CAU/B,iBAAS;AAChBV,wCAAQC,GAAR,CAAYU,KAAZ;AACAhB,gGAAqDH,GAArD;AACA,6BAbsC,CAArB;AAAA,yBAAZ,CAAP;AAeH;;;6CAEQoB,U,EAAY;;AAEjB,+BAAOvB,kBACFwB,aADE,GAEFhB,IAFE,CAEG;AAAA,mCAAc,IAAIiB,aAAJ,CAAkBC,UAAlB,CAAd;AAAA,yBAFH,EAGFlB,IAHE,CAGG;AAAA,mCAAOmB,IAAIC,QAAJ,CAAaL,UAAb,CAAP;AAAA,yBAHH,EAIFf,IAJE,CAIG;AAAA,mCAAK,wBAAL;AAAA,yBAJH,EAKFa,KALE,CAKI,eAAO;AACVV,oCAAQC,GAAR,CAAYiB,GAAZ;AACA,kCAAM,IAAIC,KAAJ,CAAU,yCAAV,CAAN;AACF,yBARC,CAAP;AASH;;;4CAEO;;AAEJ,+BAAO9B,kBACFwB,aADE,GAEFhB,IAFE,CAEG;AAAA,mCAAc,IAAIiB,aAAJ,CAAkBC,UAAlB,CAAd;AAAA,yBAFH,EAGFlB,IAHE,CAGG;AAAA,mCAAOmB,IAAII,WAAJ,EAAP;AAAA,yBAHH,EAIFV,KAJE,CAII,eAAO;AACVV,oCAAQC,GAAR,CAAYiB,GAAZ;AACA,kCAAM,IAAIC,KAAJ,CAAU,qCAAV,CAAN;AACH,yBAPE,CAAP;AAQH;;;4CAEO;;AAEJ,+BAAO9B,kBACFwB,aADE,GAEFhB,IAFE,CAEG;AAAA,mCAAc,IAAIiB,aAAJ,CAAkBC,UAAlB,CAAd;AAAA,yBAFH,EAGFlB,IAHE,CAGG;AAAA,mCAAOmB,IAAIK,UAAJ,EAAP;AAAA,yBAHH,EAIFX,KAJE,CAII,eAAO;AACVV,oCAAQC,GAAR,CAAYiB,GAAZ;AACA,mCAAOA,GAAP;AACH,yBAPE,CAAP;AAQH;;;4CAEOI,c,EAAgB;;AAEpB,+BAAO7B,QAAQ8B,GAAR,CAAY,CACf,KAAKC,KAAL,CAAW,oBAAX,CADe;AAEf;AACA;AACA,6BAAKC,KAAL,EAJe,CAAZ,EAMF5B,IANE,CAMI,uBAAe;AAClBG,oCAAQC,GAAR,CAAYH,WAAZ;AACA,mCAAOA,YACF4B,MADE,CACM,UAACC,aAAD,EAAgBC,KAAhB;AAAA,uCACLD,cAAcE,MAAd,CAAqBD,KAArB,CADK;AAAA,6BADN,EAE8B,EAF9B,EAGFE,MAHE,CAGM;AAAA,uCACL,CAACR,eAAeS,IAAf,CAAqB;AAAA,2CACtBC,KAAKC,SAAL,CAAerB,UAAf,KAA8BoB,KAAKC,SAAL,CAAeC,CAAf,CADR;AAAA,iCAArB,CADI;AAAA,6BAHN,CAAP;AAMH,yBAdE,CAAP;AAeH","file":"NegociacaoService.js","sourcesContent":["import {HttpService} from './HttpService';\nimport {ConnectionFactory} from './ConnectionFactory';\n\nexport class NegociacaoService {\n\n\tconstructor() {\n\n\t\tthis.http = new HttpService();\n\t}\n\n    obter(url) {\n\n        return new Promise((resolve, reject) => this.http\n        \t.get(url)\n        \t.then( negociacoes => {\n        \t\tresolve(negociacoes.map( json => {\n                    console.log(json.quantidade);\n                    let n = new Negociacao(new Date(json._data), json._quantidade, json._valor)\n        \t\t\tconsole.log(n);\n                    return n;\n                }))\n        \t})\n        \t.catch( error => {\n        \t\tconsole.log(error);\n        \t\treject(`Não foi possivel obter negociações da url: ${url}`);\n        \t})\n        );\n    }\n\n    cadastra(negociacao) {\n\n        return ConnectionFactory\n            .getConnection()\n            .then(connection => new NegociacaoDAO(connection))\n            .then(dao => dao.adiciona(negociacao))\n            .then(()=> 'Negociação adicionada.')\n            .catch(err => {\n                console.log(err);\n                throw new Error('Não foi possivel adicionar a negociação')\n             });\n    }\n\n    lista() {\n\n        return ConnectionFactory\n            .getConnection()\n            .then(connection => new NegociacaoDAO(connection))\n            .then(dao => dao.listarTodos())\n            .catch(err => {\n                console.log(err);\n                throw new Error(\"Não foi possivel listar negociações\");\n            })\n    }\n\n    apaga() {\n\n        return ConnectionFactory\n            .getConnection()\n            .then(connection => new NegociacaoDAO(connection))\n            .then(dao => dao.apagaTodos())\n            .catch(err => {\n                console.log(err);\n                return err;\n            })\n    }\n\n    importa(negociacaoList) {\n        \n        return Promise.all([\n            this.obter('negociacoes/semana'),\n            //this.obter('negociacoes/anterior'),\n            //this.obter('negociacoes/retrasada'),\n            this.lista()\n            ])\n            .then( negociacoes => {\n                console.log(negociacoes);\n                return negociacoes\n                    .reduce( (arrayAchatado, array) => \n                        arrayAchatado.concat(array), [])\n                    .filter( negociacao => \n                        !negociacaoList.some( f => \n                        JSON.stringify(negociacao) == JSON.stringify(f)))\n            })\n    }\n}"]}